{
	"info": {
		"_postman_id": "16396c60-bcc2-474b-a99a-a43815f48b77",
		"name": "IS-18003-DX-CATALOGUE",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17194681"
	},
	"item": [
		{
			"name": "Get Token",
			"item": [
				{
					"name": "Get Delegate Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"token\", jsonData.results.accessToken);",
									"postman.setEnvironmentVariable(\"token\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{providerClientID}}",
								"type": "text"
							},
							{
								"key": "clientSecret",
								"value": "{{providerClientSecret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": \"cat-test.iudx.io\", \n  \"itemType\": \"resource_server\",\n  \"role\": \"provider\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{auth-url}}/{{dxAuthBasePath}}/token",
							"protocol": "https",
							"host": [
								"{{auth-url}}"
							],
							"path": [
								"{{dxAuthBasePath}}",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Admin Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"token\", jsonData.results.accessToken);",
									"postman.setEnvironmentVariable(\"adminToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{adminClientID}}",
								"type": "text"
							},
							{
								"key": "clientSecret",
								"value": "{{adminClientSecret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": \"cat-test.iudx.io\", \n  \"itemType\": \"resource_server\",\n  \"role\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{auth-url}}/{{dxAuthBasePath}}/token",
							"protocol": "https",
							"host": [
								"{{auth-url}}"
							],
							"path": [
								"{{dxAuthBasePath}}",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Management APIs",
			"item": [
				{
					"name": "Create Item",
					"item": [
						{
							"name": "Test 001a : 201 - Create DX Resource Item Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"    const resultsjsonData = body.results[0];\r",
											"    pm.expect(resultsjsonData).to.have.property(\"id\");\r",
											"    const ID = resultsjsonData.id;\r",
											"    pm.globals.set(\"item_id\",ID);\r",
											"    const Name = ID.substring(ID.lastIndexOf('/')+1);\r",
											"    const providerID = ID.substring(0, ID.indexOf(\"/\", ID.indexOf(\"/\") + 1));\r",
											"    pm.globals.set(\"provider_id\", providerID);\r",
											"    pm.globals.set(\"item_name\", Name);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceGroup\": \"5b7556b5-0779-4c47-9cf2-3f209779aa22\",\r\n    \"instance\": \"pune\",\r\n    \"description\": \"Flood Sensor Data with respect to water level/flow\",\r\n    \"label\": \"FW055 Environment-UUID\",\r\n    \"type\": [\r\n        \"iudx:Resource\",\r\n        \"iudx:EnvFlood\"\r\n    ],\r\n    \"@context\": \"https://voc.iudx.org.in/\",\r\n    \"deviceInfo\": {\r\n        \"deviceSimNumber\": \"7030924255\",\r\n        \"deviceID\": \"FWR055\",\r\n        \"deviceName\": \"Rajaram Bridge\"\r\n    },\r\n    \"tags\": [\r\n        \"flooding\",\r\n        \"water flooding\",\r\n        \"flood\",\r\n        \"flood alert\",\r\n        \"flood danger\",\r\n        \"level\",\r\n        \"current level\"\r\n    ],\r\n    \"provider\": \"b2c27f3f-2524-4a84-816e-91f9ab23f837\",\r\n    \"name\": \"FWR055Copy\",\r\n    \"location\": {\r\n        \"address\": \"On Mutha River,Near Vithoba Park,Pune\",\r\n        \"geometry\": {\r\n            \"coordinates\": [\r\n                73.82772,\r\n                18.488375\r\n            ],\r\n            \"type\": \"Point\"\r\n        },\r\n        \"type\": \"Place\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 002a : 400 - Create DX Entity (Invalid Schema)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSchema\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"provider\": \"invalid-provider-id\",\r\n    \"resourceGroup\": \"5b7556b5-0779-4c47-9cf2-3f209779aa22\",\r\n    \"instance\": \"pune\",\r\n    \"description\": \"Flood Sensor Data with respect to water level/flow\",\r\n    \"label\": \"FW055 Environment-UUID\",\r\n    \"type\": [\r\n        \"iudx:Resource\",\r\n        \"iudx:EnvFlood\"\r\n    ],\r\n    \"@context\": \"https://voc.iudx.org.in/\",\r\n    \"deviceInfo\": {\r\n        \"deviceSimNumber\": \"7030924255\",\r\n        \"deviceID\": \"FWR055\",\r\n        \"deviceName\": \"Rajaram Bridge\"\r\n    },\r\n    \"tags\": [\r\n        \"flooding\",\r\n        \"water flooding\",\r\n        \"flood\",\r\n        \"flood alert\",\r\n        \"flood danger\",\r\n        \"level\",\r\n        \"current level\"\r\n    ],\r\n    \"name\": \"FWR055Copy\",\r\n    \"location\": {\r\n        \"address\": \"On Mutha River,Near Vithoba Park,Pune\",\r\n        \"geometry\": {\r\n            \"coordinates\": [\r\n                73.82772,\r\n                18.488375\r\n            ],\r\n            \"type\": \"Point\"\r\n        },\r\n        \"type\": \"Place\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 002b : 400 - Create DX Entity (Invalid Links)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:LinkValidationFailed\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceGroup\": \"5b7556b5-0779-4c47-9cf2-3f209779aa23\",\r\n    \"instance\": \"pune\",\r\n    \"description\": \"Flood Sensor Data with respect to water level/flow\",\r\n    \"label\": \"FW055 Environment-UUID\",\r\n    \"type\": [\r\n        \"iudx:Resource\",\r\n        \"iudx:EnvFlood\"\r\n    ],\r\n    \"@context\": \"https://voc.iudx.org.in/\",\r\n    \"deviceInfo\": {\r\n        \"deviceSimNumber\": \"7030924255\",\r\n        \"deviceID\": \"FWR055\",\r\n        \"deviceName\": \"Rajaram Bridge\"\r\n    },\r\n    \"tags\": [\r\n        \"flooding\",\r\n        \"water flooding\",\r\n        \"flood\",\r\n        \"flood alert\",\r\n        \"flood danger\",\r\n        \"level\",\r\n        \"current level\"\r\n    ],\r\n    \"provider\": \"b2c27f3f-2524-4a84-816e-91f9ab23f837\",\r\n    \"name\": \"FWR055Copy\",\r\n    \"location\": {\r\n        \"address\": \"On Mutha River,Near Vithoba Park,Pune\",\r\n        \"geometry\": {\r\n            \"coordinates\": [\r\n                73.82772,\r\n                18.488375\r\n            ],\r\n            \"type\": \"Point\"\r\n        },\r\n        \"type\": \"Place\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/{{base}}/item/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"{{base}}",
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 002c : 401 - Create DX Entity (Invalid credentials)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidAuthorizationToken\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceGroup\": \"5b7556b5-0779-4c47-9cf2-3f209779aa22\",\r\n    \"instance\": \"pune\",\r\n    \"description\": \"Flood Sensor Data with respect to water level/flow\",\r\n    \"label\": \"FW055 Environment-UUID\",\r\n    \"type\": [\r\n        \"iudx:Resource\",\r\n        \"iudx:EnvFlood\"\r\n    ],\r\n    \"@context\": \"https://voc.iudx.org.in/\",\r\n    \"deviceInfo\": {\r\n        \"deviceSimNumber\": \"7030924255\",\r\n        \"deviceID\": \"FWR055\",\r\n        \"deviceName\": \"Rajaram Bridge\"\r\n    },\r\n    \"tags\": [\r\n        \"flooding\",\r\n        \"water flooding\",\r\n        \"flood\",\r\n        \"flood alert\",\r\n        \"flood danger\",\r\n        \"level\",\r\n        \"current level\"\r\n    ],\r\n    \"provider\": \"b2c27f3f-2524-4a84-816e-91f9ab23f837\",\r\n    \"name\": \"FWR055Copy\",\r\n    \"location\": {\r\n        \"address\": \"On Mutha River,Near Vithoba Park,Pune\",\r\n        \"geometry\": {\r\n            \"coordinates\": [\r\n                73.82772,\r\n                18.488375\r\n            ],\r\n            \"type\": \"Point\"\r\n        },\r\n        \"type\": \"Place\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Item",
					"item": [
						{
							"name": "Test 003a : 200 - Update DX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{item_id}}\",\r\n    \"resourceGroup\": \"5b7556b5-0779-4c47-9cf2-3f209779aa22\",\r\n    \"instance\": \"pune\",\r\n    \"description\": \"Flood Sensor Data with respect to water level/flow [update desc]\",\r\n    \"label\": \"FW055 Environment-UUID\",\r\n    \"type\": [\r\n        \"iudx:Resource\",\r\n        \"iudx:EnvFlood\"\r\n    ],\r\n    \"@context\": \"https://voc.iudx.org.in/\",\r\n    \"deviceInfo\": {\r\n        \"deviceSimNumber\": \"7030924255\",\r\n        \"deviceID\": \"FWR055\",\r\n        \"deviceName\": \"Rajaram Bridge\"\r\n    },\r\n    \"tags\": [\r\n        \"flooding\",\r\n        \"water flooding\",\r\n        \"flood\",\r\n        \"flood alert\",\r\n        \"flood danger\",\r\n        \"level\",\r\n        \"current level\"\r\n    ],\r\n    \"provider\": \"b2c27f3f-2524-4a84-816e-91f9ab23f837\",\r\n    \"name\": \"FWR055Copy\",\r\n    \"location\": {\r\n        \"address\": \"On Mutha River,Near Vithoba Park,Pune\",\r\n        \"geometry\": {\r\n            \"coordinates\": [\r\n                73.82772,\r\n                18.488375\r\n            ],\r\n            \"type\": \"Point\"\r\n        },\r\n        \"type\": \"Place\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 004a : 400  - Update DX Entity (invalid schema)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSchema\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"@context\": \"https://voc.iudx.org.in/\",\r\n  \"type\": [\r\n    \"iudx:EnvAQM\"\r\n  ],\r\n  \"id\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_28\",\r\n  \"name\": \"Pune Railway Station_28\",\r\n  \"description\": \"Description for Bosch-Climo AQM resource 2\",\r\n  \"tags\": [\r\n    \"New Tag, aqm,flood\"\r\n  ],\r\n  \"provider\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc\",\r\n  \"itemStatus\": \"ACTIVE\",\r\n  \"deviceId\": \"b3ec32ff-fa7d-64fa-c0af-272e25d314e9\",\r\n  \"resourceGroup\": \"datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo\",\r\n  \"location\": {\r\n    \"type\": \"Place\",\r\n    \"address\": \"ABD area, Pune\",\r\n    \"geometry\": {\r\n      \"coordinates\": [\r\n        73.874537,\r\n        18.528311\r\n      ],\r\n      \"type\": \"Point\"\r\n    }\r\n  },\r\n  \"deviceModel\": {\r\n    \"brandName\": \"Climo\",\r\n    \"modelName\": \"Bosch-Climo\",\r\n    \"modelURL\": \"http://boschclimo.com\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 004b : 400 - Update DX Entity (Invalid Links)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:LinkValidationFailed\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"resourceGroup\": \"5b7556b5-0779-4c47-9cf2-3f209779aa23\",\r\n    \"instance\": \"pune\",\r\n    \"description\": \"Flood Sensor Data with respect to water level/flow\",\r\n    \"label\": \"FW055 Environment-UUID\",\r\n    \"type\": [\r\n        \"iudx:Resource\",\r\n        \"iudx:EnvFlood\"\r\n    ],\r\n    \"@context\": \"https://voc.iudx.org.in/\",\r\n    \"deviceInfo\": {\r\n        \"deviceSimNumber\": \"7030924255\",\r\n        \"deviceID\": \"FWR055\",\r\n        \"deviceName\": \"Rajaram Bridge\"\r\n    },\r\n    \"tags\": [\r\n        \"flooding\",\r\n        \"water flooding\",\r\n        \"flood\",\r\n        \"flood alert\",\r\n        \"flood danger\",\r\n        \"level\",\r\n        \"current level\"\r\n    ],\r\n    \"provider\": \"b2c27f3f-2524-4a84-816e-91f9ab23f837\",\r\n    \"name\": \"FWR055Copy\",\r\n    \"location\": {\r\n        \"address\": \"On Mutha River,Near Vithoba Park,Pune\",\r\n        \"geometry\": {\r\n            \"coordinates\": [\r\n                73.82772,\r\n                18.488375\r\n            ],\r\n            \"type\": \"Point\"\r\n        },\r\n        \"type\": \"Place\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 004c : 401 - Update DX Entity  (Invalid credentials)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidAuthorizationToken\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "abc"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{item_id}}\",\r\n    \"resourceGroup\": \"5b7556b5-0779-4c47-9cf2-3f209779aa22\",\r\n    \"instance\": \"pune\",\r\n    \"description\": \"Flood Sensor Data with respect to water level/flow [update desc]\",\r\n    \"label\": \"FW055 Environment-UUID\",\r\n    \"type\": [\r\n        \"iudx:Resource\",\r\n        \"iudx:EnvFlood\"\r\n    ],\r\n    \"@context\": \"https://voc.iudx.org.in/\",\r\n    \"deviceInfo\": {\r\n        \"deviceSimNumber\": \"7030924255\",\r\n        \"deviceID\": \"FWR055\",\r\n        \"deviceName\": \"Rajaram Bridge\"\r\n    },\r\n    \"tags\": [\r\n        \"flooding\",\r\n        \"water flooding\",\r\n        \"flood\",\r\n        \"flood alert\",\r\n        \"flood danger\",\r\n        \"level\",\r\n        \"current level\"\r\n    ],\r\n    \"provider\": \"b2c27f3f-2524-4a84-816e-91f9ab23f837\",\r\n    \"name\": \"FWR055Copy\",\r\n    \"location\": {\r\n        \"address\": \"On Mutha River,Near Vithoba Park,Pune\",\r\n        \"geometry\": {\r\n            \"coordinates\": [\r\n                73.82772,\r\n                18.488375\r\n            ],\r\n            \"type\": \"Point\"\r\n        },\r\n        \"type\": \"Place\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 004d : 404 - Update DX Entity (Not Found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:ItemNotFound\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"82eb575e-43e3-38a5-8bbc-36b5198ac8b6\",\r\n    \"resourceGroup\": \"5b7556b5-0779-4c47-9cf2-3f209779aa22\",\r\n    \"instance\": \"pune\",\r\n    \"description\": \"Flood Sensor Data with respect to water level/flow [update desc]\",\r\n    \"label\": \"FW055 Environment-UUID\",\r\n    \"type\": [\r\n        \"iudx:Resource\",\r\n        \"iudx:EnvFlood\"\r\n    ],\r\n    \"@context\": \"https://voc.iudx.org.in/\",\r\n    \"deviceInfo\": {\r\n        \"deviceSimNumber\": \"7030924255\",\r\n        \"deviceID\": \"FWR055\",\r\n        \"deviceName\": \"Rajaram Bridge\"\r\n    },\r\n    \"tags\": [\r\n        \"flooding\",\r\n        \"water flooding\",\r\n        \"flood\",\r\n        \"flood alert\",\r\n        \"flood danger\",\r\n        \"level\",\r\n        \"current level\"\r\n    ],\r\n    \"provider\": \"b2c27f3f-2524-4a84-816e-91f9ab23f837\",\r\n    \"name\": \"FWR055Copy\",\r\n    \"location\": {\r\n        \"address\": \"On Mutha River,Near Vithoba Park,Pune\",\r\n        \"geometry\": {\r\n            \"coordinates\": [\r\n                73.82772,\r\n                18.488375\r\n            ],\r\n            \"type\": \"Point\"\r\n        },\r\n        \"type\": \"Place\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Item",
					"item": [
						{
							"name": "Test 005a : 200 - Delete DX Entity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}{{base}}/item?id={{item_id}}",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									],
									"query": [
										{
											"key": "id",
											"value": "{{item_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 006a : 401 - Delete DX Entity  (Invalid credentials)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidAuthorizationToken\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "abc",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}{{base}}/item?id=b2c27f3f-2524-4a84-816e-91f9ab23f837",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									],
									"query": [
										{
											"key": "id",
											"value": "b2c27f3f-2524-4a84-816e-91f9ab23f837"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 006b : 404 - Delete DX Entity (Not Found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:ItemNotFound\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}{{base}}/item?id=82eb575e-43e3-38a5-8bbc-36b5198ac8b7",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									],
									"query": [
										{
											"key": "id",
											"value": "82eb575e-43e3-38a5-8bbc-36b5198ac8b7"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get/List Item",
					"item": [
						{
							"name": "Test 007a : 200 - Get DX Entity by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/item?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Test 008a : 404 - Get DX Entity by ID (Not Found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.be.notFound;\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:ItemNotFound\");\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}{{base}}/item?id=83c2e5c2-3574-4e11-9530-2b1fbdfce845",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									],
									"query": [
										{
											"key": "id",
											"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce845"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Discovery APIs",
			"item": [
				{
					"name": "G0",
					"item": [
						{
							"name": "Attribute Search (Property search)",
							"item": [
								{
									"name": "Test 009a : 200 - SimpleAttribute",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[id]\"&value=\"[[83c2e5c2-3574-4e11-9530-2b1fbdfce832]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[id]\""
												},
												{
													"key": "value",
													"value": "\"[[83c2e5c2-3574-4e11-9530-2b1fbdfce832]]\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 009b : 200 - SimpleAttribute MultiValue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[id]\"&value=\"[[83c2e5c2-3574-4e11-9530-2b1fbdfce832,695e222b-3fae-4325-8db0-3e29d01c4fc0]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[id]\""
												},
												{
													"key": "value",
													"value": "\"[[83c2e5c2-3574-4e11-9530-2b1fbdfce832,695e222b-3fae-4325-8db0-3e29d01c4fc0]]\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 009c : 200 - MultiAttribute MultiValue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[tags,name]\"&value=\"[[flooding, current level],[FWR055]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[tags,name]\""
												},
												{
													"key": "value",
													"value": "\"[[flooding, current level],[FWR055]]\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 009d : 200 - NestedAttributeSearch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[tags,location.address]\"&value=\"[[aqm, flood], [pune,delhi]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[tags,location.address]\""
												},
												{
													"key": "value",
													"value": "\"[[aqm, flood], [pune,delhi]]\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 010a : 400 - SimpleAttribute (invalid  id)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body 1\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidPropertyValue\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[id]\"&value=\"[[inVal!d-id]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[id]\""
												},
												{
													"key": "value",
													"value": "\"[[inVal!d-id]]\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 010b : 400  - SimpleAttribute MultiValue (Invalid param value)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body 1\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidPropertyValue\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[id]\"&value=\"[[83c2e5c2-3574-4e11-9530-2b1fbdfce832,inv@lid-id]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[id]\""
												},
												{
													"key": "value",
													"value": "\"[[83c2e5c2-3574-4e11-9530-2b1fbdfce832,inv@lid-id]]\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 010c : 400 - SimpleAttribute (InvalidProperty-1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body 1\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[invalid prop!]\"&value=\"[[83c2e5c2-3574-4e11-9530-2b1fbdfce832]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[invalid prop!]\""
												},
												{
													"key": "value",
													"value": "\"[[83c2e5c2-3574-4e11-9530-2b1fbdfce832]]\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 010d : 400 - SimpleAttribute MultiValue (InvalidProperty-2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body 1\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=[%23abc]&value=[[abc, abc123]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "[%23abc]"
												},
												{
													"key": "value",
													"value": "[[abc, abc123]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 010e : 400 - Exceed property queryParam",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[id,name,tags,location,deviceId]\"&value=\"[[83c2e5c2-3574-4e11-9530-2b1fbdfce832],[sensor1],[aqm],[pune],[1234]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[id,name,tags,location,deviceId]\""
												},
												{
													"key": "value",
													"value": "\"[[83c2e5c2-3574-4e11-9530-2b1fbdfce832],[sensor1],[aqm],[pune],[1234]]\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 010f : 400 - Exceed value pair queryParam",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[id,name,tags,location]\"&value=\"[[83c2e5c2-3574-4e11-9530-2b1fbdfce832],[sensor1],[aqm],[pune],[1234]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[id,name,tags,location]\""
												},
												{
													"key": "value",
													"value": "\"[[83c2e5c2-3574-4e11-9530-2b1fbdfce832],[sensor1],[aqm],[pune],[1234]]\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 010g : 400 - Exceed Value queryParam",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[id,name,tags,location]\"&value=\"[[83c2e5c2-3574-4e11-9530-2b1fbdfce832],[sensor1,sensor2,sensor3,sensor4,sensor5],[aqm],[pune]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[id,name,tags,location]\""
												},
												{
													"key": "value",
													"value": "\"[[83c2e5c2-3574-4e11-9530-2b1fbdfce832],[sensor1,sensor2,sensor3,sensor4,sensor5],[aqm],[pune]]\""
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List Items",
							"item": [
								{
									"name": "Test 011a : 200 - List Tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:Success\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/list/tags",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"list",
												"tags"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 011b : 200 - List Instances",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/list/instance",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"list",
												"instance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 011c : 200 - List ResourceGroup",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/list/resourceGroup",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"list",
												"resourceGroup"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 011d : 200 - List ResourceServer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property( \"type\",  \"urn:dx:cat:Success\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/list/resourceServer",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"list",
												"resourceServer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 011e : 200 - List Provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:Success\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/list/provider",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"list",
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 012a : 400 - List tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/list/tag",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"list",
												"tag"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 012b : 400 - List Instances",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:InvalidSyntax\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/list/instanc",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"list",
												"instanc"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 012c : 400 - List ResourceGroup",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/list/resourceGrp",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"list",
												"resourceGrp"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 012d : 400 - List ResourceServer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/list/resourceSvr",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"list",
												"resourceSvr"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 012e : 400 - List Provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:InvalidSyntax\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/list/rprovider",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"list",
												"rprovider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 012f : 400 - List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/list/resource",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"list",
												"resource"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Tag Search (Property search)",
							"item": [
								{
									"name": "Test 013a : 200 - Tag Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[pollution]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[tags]\""
												},
												{
													"key": "value",
													"value": "\"[[pollution]]\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 013b : 200 - Tag Search multi value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=[tags]&value=[[pollution, flood]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "[tags]"
												},
												{
													"key": "value",
													"value": "[[pollution, flood]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 014a : 400 - Tag Search 1 (InvalidValue)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body 1\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[$abc123]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[tags]\""
												},
												{
													"key": "value",
													"value": "\"[[$abc123]]\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 014b : 400 - Tag Search 2 multi value (InvalidValue)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body 1\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=[tag$]&value=[[abc, abc123]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "[tag$]"
												},
												{
													"key": "value",
													"value": "[[abc, abc123]]"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Count APIs",
							"item": [
								{
									"name": "Test 015a : 200 - Count Tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body 2\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"totalHits\",159);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"itemDescription\": \"Live location of solid waste managemet vehicles operating in varanasi\",\r\n    \"@context\": [\r\n        \"https://raw.githubusercontent.com/iudx/iudx-ld/master/data_models/civic/swm/swm_context.json\"\r\n    ],\r\n    \"onboardedBy\": \"Technical consultant at rbccps.org\",\r\n    \"providerId\": \"urn:iudx-catalogue-varanasi:vscl\",\r\n    \"refBaseSchema\": {\r\n        \"type\": \"Relationship\",\r\n        \"value\": \"https://raw.githubusercontent.com/iudx/iudx-ld/master/base_schemas/v0.0.0/resourceItem_schema.json\"\r\n    },\r\n    \"resourceServerGroup\": {\r\n        \"type\": \"Relationship\",\r\n        \"value\": \"urn:iudx-catalogue-varanasi:rs.varanasi.iudx.org.in/varanasi-swm-vehicles\"\r\n    },\r\n    \"createdAt\": {\r\n        \"type\": \"TimeProperty\",\r\n        \"value\": \"Fri Feb 28 07:30:40 UTC 2020\"\r\n    },\r\n    \"refDataModel\": {\r\n        \"value\": \"https://raw.githubusercontent.com/iudx/iudx-ld/master/data_models/civic/swm/civic_swm_vehicle_0.json\",\r\n        \"type\": \"Relationship\"\r\n    },\r\n    \"itemStatus\": {\r\n        \"type\": \"Property\",\r\n        \"value\": \"active\"\r\n    },\r\n    \"resourceServer\": {\r\n        \"type\": \"Relationship\",\r\n        \"value\": \"urn:iudx-catalogue-varanasi:rs.varanasi.iudx.org.in\"\r\n    },\r\n    \"coverageRegion\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": {\r\n            \"address\": \"Varanasi, Uttar Pradesh, India\",\r\n            \"geometry\": {\r\n                \"type\": \"Polygon\",\r\n                \"coordinates\": [\r\n                    [\r\n                        [\r\n                            83.023681640625,\r\n                            25.254322111163436\r\n                        ],\r\n                        [\r\n                            83.00497055053711,\r\n                            25.289559766014474\r\n                        ],\r\n                        [\r\n                            83.00857543945312,\r\n                            25.309269760067775\r\n                        ],\r\n                        [\r\n                            83.04410934448242,\r\n                            25.329752340442084\r\n                        ],\r\n                        [\r\n                            83.05732727050781,\r\n                            25.334251837065878\r\n                        ],\r\n                        [\r\n                            83.05887222290039,\r\n                            25.34635310133767\r\n                        ],\r\n                        [\r\n                            83.01218032836914,\r\n                            25.371327523300355\r\n                        ],\r\n                        [\r\n                            82.94471740722656,\r\n                            25.366674295455695\r\n                        ],\r\n                        [\r\n                            82.93373107910155,\r\n                            25.316408022244975\r\n                        ],\r\n                        [\r\n                            82.94986724853516,\r\n                            25.263016051488446\r\n                        ],\r\n                        [\r\n                            82.96394348144531,\r\n                            25.22668366866147\r\n                        ],\r\n                        [\r\n                            82.97733306884766,\r\n                            25.213017398428725\r\n                        ],\r\n                        [\r\n                            83.01544189453125,\r\n                            25.219850725454755\r\n                        ],\r\n                        [\r\n                            83.023681640625,\r\n                            25.254322111163436\r\n                        ]\r\n                    ]\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    \"authorizationServerInfo\": {\r\n        \"type\": \"Property\",\r\n        \"value\": {\r\n            \"authType\": \"iudx-auth\",\r\n            \"authServer\": \"http://auth.iudx.org.in\"\r\n        }\r\n    },\r\n    \"tags\": {\r\n        \"type\": \"Property\",\r\n        \"value\": [\r\n            \"solid\",\r\n            \"garbage\",\r\n            \"waste\",\r\n            \"management\",\r\n            \"collection\",\r\n            \"vehicle\",\r\n            \"truck\"\r\n        ]\r\n    },\r\n    \"itemType\": \"Resource\",\r\n    \"provider\": {\r\n        \"value\": \"urn:iudx-catalogue-varanasi:vscl\",\r\n        \"type\": \"Relationship\"\r\n    },\r\n    \"dataAttributeList\": {\r\n        \"secure\": [],\r\n        \"open\": [\r\n            \"vehicleNo\",\r\n            \"wardNo\",\r\n            \"dateTime\",\r\n            \"latitude\",\r\n            \"longitude\",\r\n            \"location\"\r\n        ]\r\n    },\r\n    \"resourceId\": {\r\n        \"type\": \"Property\",\r\n        \"value\": \"varanasi-swm-vehicles-live\"\r\n    },\r\n    \"updatedAt\": {\r\n        \"type\": \"TimeProperty\",\r\n        \"value\": \"Fri Feb 28 07:30:40 UTC 2020\"\r\n    }\r\n}"
										},
										"url": {
											"raw": "{{host}}{{base}}/count?property=[tags]&value=[[flooding]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "property",
													"value": "[tags]"
												},
												{
													"key": "value",
													"value": "[[flooding]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 015b : 200 - Count Tag MultiValue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body 2\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"totalHits\", 687);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?property=[tags]&value=[[pollution, flood]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "property",
													"value": "[tags]"
												},
												{
													"key": "value",
													"value": "[[pollution, flood]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 015c : 200 - Count Attributes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?property=[id]&value=[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "property",
													"value": "[id]"
												},
												{
													"key": "value",
													"value": "[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 015d : 200 - Count Attribute SingleProperty MultiValue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body 2\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?property=[id]&value=[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24,datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Chandani_Square_25]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "property",
													"value": "[id]"
												},
												{
													"key": "value",
													"value": "[[datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24,datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.org.in/aqm-bosch-climo/Chandani_Square_25]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 015e : 200 - Count Attribute Nested-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?property=\"[tags,deviceId.keyword]\"&value=\"[[aqm],[8cff12b2-b8be-1230-c5f6-ca96b4e4e441,climo]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[tags,deviceId.keyword]\""
												},
												{
													"key": "value",
													"value": "\"[[aqm],[8cff12b2-b8be-1230-c5f6-ca96b4e4e441,climo]]\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 015f : 200 - Count Attribute Nested-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response count\", function() {\r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"totalHits\",160);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?property=\"[tags,location.address]\"&value=\"[[aqm, flood], [pune,delhi]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[tags,location.address]\""
												},
												{
													"key": "value",
													"value": "\"[[aqm, flood], [pune,delhi]]\""
												},
												{
													"key": "filter",
													"value": "[deviceModelInfo.name]",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 016a : 400 - Count Tag SingleAttr InvalidValue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?property=\"[tags]\"&value=\"[[abc123*]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[tags]\""
												},
												{
													"key": "value",
													"value": "\"[[abc123*]]\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 016b : 200 - Count Tag SingleAttr InvalidMultiValue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?property=[tags]&value=[[abc%23, abc123]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "property",
													"value": "[tags]"
												},
												{
													"key": "value",
													"value": "[[abc%23, abc123]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 016c : 200 - Count Tag InvalidProperty InvalidValue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?property=[abc-]&value=[[abc123]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "property",
													"value": "[abc-]"
												},
												{
													"key": "value",
													"value": "[[abc123]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 016d : 200 - Count Attribute SingleProperty InvalidValue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?property=[id]&value=[[invalid-id*]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "property",
													"value": "[id]"
												},
												{
													"key": "value",
													"value": "[[invalid-id*]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 016e : 200 - Count Attribute SingleProperty MultiValue with InvalidValue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?property=\"[id]\"&value=\"[[83c2e5c2-3574-4e11-9530-2b1fbdfce832,invalid-id*]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[id]\""
												},
												{
													"key": "value",
													"value": "\"[[83c2e5c2-3574-4e11-9530-2b1fbdfce832,invalid-id*]]\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 016f : 200 - Count Attribute InvalidProperty (totalHits=0)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?property=\"[id*]\"&value=\"[[83c2e5c2-3574-4e11-9530-2b1fbdfce832]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[id*]\""
												},
												{
													"key": "value",
													"value": "\"[[83c2e5c2-3574-4e11-9530-2b1fbdfce832]]\""
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "G1",
					"item": [
						{
							"name": "Relationship APIs",
							"item": [
								{
									"name": "Test 017a : 200 - Relationship ResourceGroup",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:Success\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/relationship?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&rel=resourceGroup",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"relationship"
											],
											"query": [
												{
													"key": "id",
													"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
												},
												{
													"key": "rel",
													"value": "resourceGroup"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 017b : 200 - Relationship Resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/relationship?id=8b95ab80-2aaf-4636-a65e-7f2563d0d371&rel=resource",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"relationship"
											],
											"query": [
												{
													"key": "id",
													"value": "8b95ab80-2aaf-4636-a65e-7f2563d0d371"
												},
												{
													"key": "rel",
													"value": "resource"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 017c : 200 - Relationship Provider [ResourceID]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/relationship?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&rel=provider",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"relationship"
											],
											"query": [
												{
													"key": "id",
													"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
												},
												{
													"key": "rel",
													"value": "provider"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 017d : 200 - Relationship Provider [ResourceGroup]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/relationship?id=8b95ab80-2aaf-4636-a65e-7f2563d0d371&rel=provider",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"relationship"
											],
											"query": [
												{
													"key": "id",
													"value": "8b95ab80-2aaf-4636-a65e-7f2563d0d371"
												},
												{
													"key": "rel",
													"value": "provider"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 017e : 200 - Relationship ResourceServer [ResourceId]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/relationship?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&rel=resourceServer",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"relationship"
											],
											"query": [
												{
													"key": "id",
													"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
												},
												{
													"key": "rel",
													"value": "resourceServer"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 017f : 200 - Relationship ResourceServer [ResourceGroup]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/relationship?id=8b95ab80-2aaf-4636-a65e-7f2563d0d371&rel=resourceServer",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"relationship"
											],
											"query": [
												{
													"key": "id",
													"value": "8b95ab80-2aaf-4636-a65e-7f2563d0d371"
												},
												{
													"key": "rel",
													"value": "resourceServer"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 017g: 200 - List Type (Data Model) given ResourceGroup id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/relationship?id=8b95ab80-2aaf-4636-a65e-7f2563d0d371&rel=type",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"relationship"
											],
											"query": [
												{
													"key": "id",
													"value": "8b95ab80-2aaf-4636-a65e-7f2563d0d371"
												},
												{
													"key": "rel",
													"value": "type"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 017h: 200 - List Type (Data Model) given Resource Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
													"    pm.expect(body).to.have.property(\"totalHits\", 1);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/relationship?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&rel=type",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"relationship"
											],
											"query": [
												{
													"key": "id",
													"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
												},
												{
													"key": "rel",
													"value": "type"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 018a : 400 - Invalid Relationship-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:InvalidParamValue\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/relationship?id=8b95ab80-2aaf-4636-a65e-7f2563d0d371&rel=resourceGrp",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"relationship"
											],
											"query": [
												{
													"key": "id",
													"value": "8b95ab80-2aaf-4636-a65e-7f2563d0d371"
												},
												{
													"key": "rel",
													"value": "resourceGrp"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 018b : 400 - Invalid Relationship-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidParamValue\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/relationship?id=8b95ab80-2aaf-4636-a65e-7f2563d0d371&rel=resrce",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"relationship"
											],
											"query": [
												{
													"key": "id",
													"value": "8b95ab80-2aaf-4636-a65e-7f2563d0d371"
												},
												{
													"key": "rel",
													"value": "resrce"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 018c : 400 - Invalid Relationship-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:MissingParams\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/relationship?id=8b95ab80-2aaf-4636-a65e-7f2563d0d371&re1l=resource",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"relationship"
											],
											"query": [
												{
													"key": "id",
													"value": "8b95ab80-2aaf-4636-a65e-7f2563d0d371"
												},
												{
													"key": "re1l",
													"value": "resource"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 018d : 400 - Invalid Relationship-4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.be.badRequest;\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:MissingParams\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/relationship?i1d=8b95ab80-2aaf-4636-a65e-7f2563d0d371&rel=resourceServer",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"relationship"
											],
											"query": [
												{
													"key": "i1d",
													"value": "8b95ab80-2aaf-4636-a65e-7f2563d0d371"
												},
												{
													"key": "rel",
													"value": "resourceServer"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Relationship Search",
							"item": [
								{
									"name": "Test 019a: 200 - Search a relationship 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/relsearch?relationship=\"[provider.name]\"&value=\"[[IUDXAdmin]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"relsearch"
											],
											"query": [
												{
													"key": "relationship",
													"value": "\"[provider.name]\""
												},
												{
													"key": "value",
													"value": "\"[[IUDXAdmin]]\""
												}
											]
										},
										"description": "Relationship Search 1 Success"
									},
									"response": []
								},
								{
									"name": "Test 019b: 200 - Search a relationship 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/relsearch?value=\"[[openAPI]]\"&relationship=\"[resourceGroup.accessObjectInfo.accessObjectType]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"relsearch"
											],
											"query": [
												{
													"key": "value",
													"value": "\"[[openAPI]]\""
												},
												{
													"key": "relationship",
													"value": "\"[resourceGroup.accessObjectInfo.accessObjectType]\""
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Geo-Spatial Search",
							"item": [
								{
									"name": "Point (Circle) Search",
									"item": [
										{
											"name": "Test 020a: 200 - Search based on circle",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.827285,18.482712]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "maxDistance",
															"value": "5000"
														},
														{
															"key": "geometry",
															"value": "Point"
														},
														{
															"key": "coordinates",
															"value": "[73.827285,18.482712]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 021a : 400 - Search based on circle InvalidValue-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidGeoValue\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=abc&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "abc"
														},
														{
															"key": "maxDistance",
															"value": "5000"
														},
														{
															"key": "geometry",
															"value": "Point"
														},
														{
															"key": "coordinates",
															"value": "[73.927285,18.502712]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 021b : 400 - Search based on circle invalidValue-2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=intersects&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712ab]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "intersects"
														},
														{
															"key": "maxDistance",
															"value": "5000"
														},
														{
															"key": "geometry",
															"value": "Point"
														},
														{
															"key": "coordinates",
															"value": "[73.927285,18.502712ab]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 021c : 400 - Search based on circle invalidValue-3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InternalError\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=abc&georel=intersects&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "abc"
														},
														{
															"key": "georel",
															"value": "intersects"
														},
														{
															"key": "maxDistance",
															"value": "5000"
														},
														{
															"key": "geometry",
															"value": "Point"
														},
														{
															"key": "coordinates",
															"value": "[73.927285,18.502712]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 021d : 400 - Search based on circle InvalidSyntax-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?abcgeoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "abcgeoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "maxDistance",
															"value": "5000"
														},
														{
															"key": "geometry",
															"value": "Point"
														},
														{
															"key": "coordinates",
															"value": "[73.927285,18.502712]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 021e : 400 - Search based on circle invalidSyntax-2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&abgeorel=intersects&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "abgeorel",
															"value": "intersects"
														},
														{
															"key": "maxDistance",
															"value": "5000"
														},
														{
															"key": "geometry",
															"value": "Point"
														},
														{
															"key": "coordinates",
															"value": "[73.927285,18.502712]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 021f : 400 - Search based on circle invalidSyntax-3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:InvalidSyntax\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=intersects&maxDistance=5000&geometryabc=Point&coordinates=[73.927285,18.502712]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "intersects"
														},
														{
															"key": "maxDistance",
															"value": "5000"
														},
														{
															"key": "geometryabc",
															"value": "Point"
														},
														{
															"key": "coordinates",
															"value": "[73.927285,18.502712]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 021g : 400- precision validation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=1000&geometry=Point&coordinates=[73.9272851,18.5027121]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "maxDistance",
															"value": "1000"
														},
														{
															"key": "geometry",
															"value": "Point"
														},
														{
															"key": "coordinates",
															"value": "[73.9272851,18.5027121]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 021h: 400 - Coordinate pair",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=100&geometry=Point&coordinates=[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "maxDistance",
															"value": "100"
														},
														{
															"key": "geometry",
															"value": "Point"
														},
														{
															"key": "coordinates",
															"value": "[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 021i: 400 - maxDistance Limit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=50000&geometry=Point&coordinates=[73.927285,18.502712]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "maxDistance",
															"value": "50000"
														},
														{
															"key": "geometry",
															"value": "Point"
														},
														{
															"key": "coordinates",
															"value": "[73.927285,18.502712]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 021j: 400 - Negative maxDistance",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=-5000&geometry=Point&coordinates=[73.927285,18.502712]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "maxDistance",
															"value": "-5000"
														},
														{
															"key": "geometry",
															"value": "Point"
														},
														{
															"key": "coordinates",
															"value": "[73.927285,18.502712]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 021k : 400 - Coordinate Infinity Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[732321414141312354253636345241312373232141414131235425363634524131237323214141413123542536363452413123732321414141312354253636345241312373232141414131235425363634524131237323214141413123542536363452413123732321414141312354253636345241312373232141414131235425363634524131237323214141413123542536363452413123732321414141312354253636345241312373232141414131235425363634524131237323214141413123542536363452413123732321414141312354253636345241312373232141414131235425363634524131237323214141413123542536363452413123.927285,18.502712]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "maxDistance",
															"value": "5000"
														},
														{
															"key": "geometry",
															"value": "Point"
														},
														{
															"key": "coordinates",
															"value
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Polygon Search",
									"item": [
										{
											"name": "Test 022a: 200 - Search Polygon",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "Polygon"
														},
														{
															"key": "coordinates",
															"value": "[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 023a : 400 - Search Polygon invalidValue-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InternalError\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=abclocation&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "abclocation"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "Polygon"
														},
														{
															"key": "coordinates",
															"value": "[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 023b : 400 - Search Polygon invalidValue-2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:InvalidGeoValue\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=1within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "1within"
														},
														{
															"key": "geometry",
															"value": "Polygon"
														},
														{
															"key": "coordinates",
															"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 023c: 400 - Search Polygon invalidValue-3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[abc73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "Polygon"
														},
														{
															"key": "coordinates",
															"value": "[[[abc73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 023d : 400  - Search Polygon invalidSyntax-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?abcgeoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "abcgeoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "Polygon"
														},
														{
															"key": "coordinates",
															"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 023e : 400  - Search Polygon invalidSyntax-2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:InvalidSyntax\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&abcgeorel=within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "abcgeorel",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "Polygon"
														},
														{
															"key": "coordinates",
															"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 023f : 400  - Search Polygon invalidSyntax-3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&abccoordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "Polygon"
														},
														{
															"key": "abccoordinates",
															"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 023g: 400 - precision validation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9324532,14.5],[72,13],[73,20],[75.9,14.5]]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "Polygon"
														},
														{
															"key": "coordinates",
															"value": "[[[75.9324532,14.5],[72,13],[73,20],[75.9,14.5]]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 023h: 400 - Coordinates Pair",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "Polygon"
														},
														{
															"key": "coordinates",
															"value": "[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 023i: 400 - Coordiante infinity check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "Polygon"
														},
														{
															"key": "coordinates",
															"value
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "LineString Search",
									"item": [
										{
											"name": "Test 024a: 200 - Search Line String",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.82772,18.488375],[73.876484,18.525007]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "intersects"
														},
														{
															"key": "geometry",
															"value": "LineString"
														},
														{
															"key": "coordinates",
															"value": "[[73.874537,18.528311],[73.82772,18.488375],[73.876484,18.525007]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 025a: 400 - Search Line String invalidValue-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:InternalError\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=abclocation&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "abclocation"
														},
														{
															"key": "georel",
															"value": "intersects"
														},
														{
															"key": "geometry",
															"value": "LineString"
														},
														{
															"key": "coordinates",
															"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 025b: 400 - Search Line String invalidValue-2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:InvalidGeoValue\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=abcintersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "abcintersects"
														},
														{
															"key": "geometry",
															"value": "LineString"
														},
														{
															"key": "coordinates",
															"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 025c: 400 - Search Line String invalidValue-3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[abc73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "intersects"
														},
														{
															"key": "geometry",
															"value": "LineString"
														},
														{
															"key": "coordinates",
															"value": "[[abc73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 025d : 400  - Search Line String invalidSyntax-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{base}}/search?abcgeoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "abcgeoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "intersects"
														},
														{
															"key": "geometry",
															"value": "LineString"
														},
														{
															"key": "coordinates",
															"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 025e : 400  - Search Line String invalidSyntax-2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&abcgeorel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "abcgeorel",
															"value": "intersects"
														},
														{
															"key": "geometry",
															"value": "LineString"
														},
														{
															"key": "coordinates",
															"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 025f : 400  - Search Line String invalidSyntax-3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&abccoordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "intersects"
														},
														{
															"key": "geometry",
															"value": "LineString"
														},
														{
															"key": "abccoordinates",
															"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 025g: 400 - Precision validation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.8745374,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "intersects"
														},
														{
															"key": "geometry",
															"value": "LineString"
														},
														{
															"key": "coordinates",
															"value": "[[73.8745374,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 025h : 400 - Coordinate pair",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=LineString&coordinates=[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "LineString"
														},
														{
															"key": "coordinates",
															"value": "[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 025i : 400 - Coordinate inifinity check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "intersects"
														},
														{
															"key": "geometry",
															"value": "LineString"
														},
														{
															"key": "coordinates",
															"value
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Bbox Search",
									"item": [
										{
											"name": "Test 026a: 200 - Search Bbox",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73.8120,18.5305],[73.8665,18.4126]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "bbox"
														},
														{
															"key": "coordinates",
															"value": "[[73.8120,18.5305],[73.8665,18.4126]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 027a: 400 - Search Bbox invalidValue-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InternalError\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location1&georel=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location1"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "bbox"
														},
														{
															"key": "coordinates",
															"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 027b: 400 - Search Bbox invalidValue-2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidGeoValue\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=withinab&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "withinab"
														},
														{
															"key": "geometry",
															"value": "bbox"
														},
														{
															"key": "coordinates",
															"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 027c: 400 - Search Bbox invalidValue-3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[sb73.874537,18.528311],[73.874537,18.528311]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "bbox"
														},
														{
															"key": "coordinates",
															"value": "[[sb73.874537,18.528311],[73.874537,18.528311]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 027d : 400  - Search Bbox invalidSyntax-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{base}}/search?geopropertyabc=location&georel=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geopropertyabc",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "bbox"
														},
														{
															"key": "coordinates",
															"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 027e : 400  - Search Bbox invalidSyntax-2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georelan=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georelan",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "bbox"
														},
														{
															"key": "coordinates",
															"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 027f : 400  - Search Bbox invalidSyntax-3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinatesan=[[73.874537,18.528311],[73.874537,18.528311]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "bbox"
														},
														{
															"key": "coordinatesan",
															"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 027g: 400 - Precision validation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73.84231220,18.5305],[73.8665,18.5126]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "bbox"
														},
														{
															"key": "coordinates",
															"value": "[[73.84231220,18.5305],[73.8665,18.5126]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 027h: 400 - Coordinate pair",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "bbox"
														},
														{
															"key": "coordinates",
															"value": "[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Test 027i: 400 - Coordinate infinity check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Check response header\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check response body\", function () {    \r",
															"    const body = pm.response.json();\r",
															"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates
													"host": [
														"{{host}}{{base}}"
													],
													"path": [
														"search"
													],
													"query": [
														{
															"key": "geoproperty",
															"value": "location"
														},
														{
															"key": "georel",
															"value": "within"
														},
														{
															"key": "geometry",
															"value": "bbox"
														},
														{
															"key": "coordinates",
															"value
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Text Search",
							"item": [
								{
									"name": "Test 028a: 200 - Text Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?q=\"Flood Sensor Data\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "\"Flood Sensor Data\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 028b: 200 - Text Search Special character",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?q=\"Flood*\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "\"Flood*\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 029a: 400 - Text Search Special character",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?q=.\"dss$%fdd",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": ".\"dss$%fdd"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 029b : 400  - Text Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?abc123=\"text to search\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "abc123",
													"value": "\"text to search\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 029c: 400 - Search string size",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?q=\"Goliber Square Sivaji chowk Maharashtra near Railway station aqm pollution sensor iudx iudxadmin resource\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "\"Goliber Square Sivaji chowk Maharashtra near Railway station aqm pollution sensor iudx iudxadmin resource\""
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Count APIs",
							"item": [
								{
									"name": "Test 030a: 200 - Count based on Text",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?q=\"Flood\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "q",
													"value": "\"Flood\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 030b: 200 - Count Text using SpecialChar[*]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?q=\"Sens*\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "q",
													"value": "\"Sens*\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 030c: 200 - Count Circle(Point)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/count?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.8,18.5]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.8,18.5]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 030d : 200 - Count Polygons",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/count?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 030e : 200 - Count LineString",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.82772,18.488375],[73.876484,18.525007]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.82772,18.488375],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 030f : 200 - Count Bbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73,20],[75,18]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73,20],[75,18]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 031a : 400 - Count Text InvalidSyntax-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?q=.\"dss$%fdd",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "q",
													"value": ".\"dss$%fdd"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 031b : 400 - Count Text InvalidSyntax-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?abc123=\"text to search\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "abc123",
													"value": "\"text to search\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 031c : 400 - Count Circle(Point)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidGeoValue\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/count?geoproperty=location&georel=abc&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "abc"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 031d : 400 - Count Circle(Point)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/count?abcgeoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "abcgeoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 031e: 400 - Count Polygon",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InternalError\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/count?geoproperty=abclocation&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "abclocation"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 031f : 400 - Count Polygon",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/count?abcgeoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "abcgeoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 031g : 400 - Count LineString",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InternalError\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?geoproperty=abclocation&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "abclocation"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 031h : 400 - Count LineString",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?abcgeoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "abcgeoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 031i : 400 - Count Bbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:InternalError\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?geoproperty=location1&georel=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location1"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 031j : 400 - Count Bbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:InvalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/count?geopropertyabc=location&georel=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"count"
											],
											"query": [
												{
													"key": "geopropertyabc",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "G2",
					"item": [
						{
							"name": "Complex Search",
							"item": [
								{
									"name": "Test 032a: 200 - Attribute + Geo (G0 and G1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[location.address]\""
												},
												{
													"key": "value",
													"value": "\"[[pune,delhi]]\""
												},
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 032a: 200 - Attribute + Text (G0 and G1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?q=\"bus position\"&property=\"[instance, itemStatus]\"&value=\"[[surat],[ACTIVE]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "\"bus position\""
												},
												{
													"key": "property",
													"value": "\"[instance, itemStatus]\""
												},
												{
													"key": "value",
													"value": "\"[[surat],[ACTIVE]]\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 032c: 200 - Attribute + Geo + Text (G0 and G1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]&q=\"sens data\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[location.address]\""
												},
												{
													"key": "value",
													"value": "\"[[pune,delhi]]\""
												},
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]"
												},
												{
													"key": "q",
													"value": "\"sens data\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 032d: 200 - Tag + Geo (G0 and G1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[flood]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[tags]\""
												},
												{
													"key": "value",
													"value": "\"[[flood]]\""
												},
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 032e: 200 - Tag + Text (G0 and G1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?q=\"bus position\"&property=\"[tags]\"&value=\"[[vehicle]]\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "\"bus position\""
												},
												{
													"key": "property",
													"value": "\"[tags]\""
												},
												{
													"key": "value",
													"value": "\"[[vehicle]]\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 032f: 200 - Tag + Geo + Text (G0 and G1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[flood]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]&q=\"sens data\"",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[tags]\""
												},
												{
													"key": "value",
													"value": "\"[[flood]]\""
												},
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]"
												},
												{
													"key": "q",
													"value": "\"sens data\""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 032g: 200 - Geo + Text (within G1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?q=\"sens data\"&geoproperty=location&georel=within&geometry=Point&coordinates=[73.8,18.5]&maxDistance=5000",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "\"sens data\""
												},
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.8,18.5]"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Response Filtering",
							"item": [
								{
									"name": "Test 033a: 200 - Attribute Search Response FIlter",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[tags,location.address]\"&value=\"[[aqm, flood], [pune,delhi]]\"&filter=[deviceModel.modelName, location.geometry]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[tags,location.address]\""
												},
												{
													"key": "value",
													"value": "\"[[aqm, flood], [pune,delhi]]\""
												},
												{
													"key": "filter",
													"value": "[deviceModel.modelName, location.geometry]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033b: 200 - Attribute Search Response Filter and Limit+Offset",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[tags,location.address]\"&value=\"[[aqm, flood], [pune,delhi]]\"&filter=[itemCreatedAt]&limit=3&offset=0",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[tags,location.address]\""
												},
												{
													"key": "value",
													"value": "\"[[aqm, flood], [pune,delhi]]\""
												},
												{
													"key": "filter",
													"value": "[itemCreatedAt]"
												},
												{
													"key": "limit",
													"value": "3"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033c: 200 - List Search with Limit",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/list/tags?limit=10",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"list",
												"tags"
											],
											"query": [
												{
													"key": "limit",
													"value": "10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033d: 200 - Tag Search Response Filtering",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[flood]]\"&filter=[id,tags]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[tags]\""
												},
												{
													"key": "value",
													"value": "\"[[flood]]\""
												},
												{
													"key": "filter",
													"value": "[id,tags]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033e: 200 - Tag Search Response Filtering and Limit+Offset",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[flood]]\"&filter=[id,tags]&limit=100&offset=0",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[tags]\""
												},
												{
													"key": "value",
													"value": "\"[[flood]]\""
												},
												{
													"key": "filter",
													"value": "[id,tags]"
												},
												{
													"key": "limit",
													"value": "100"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033f: 200 - Relationship(Resource) API Response Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:Success\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/relationship?id=8b95ab80-2aaf-4636-a65e-7f2563d0d371&rel=resource&filter=[location.address]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"relationship"
											],
											"query": [
												{
													"key": "id",
													"value": "8b95ab80-2aaf-4636-a65e-7f2563d0d371"
												},
												{
													"key": "rel",
													"value": "resource"
												},
												{
													"key": "filter",
													"value": "[location.address]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033g: 200 - Relationship(Resource) API Response Filter and Limit+Offset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",  \"urn:dx:cat:Success\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/relationship?id=8b95ab80-2aaf-4636-a65e-7f2563d0d371&rel=resource&filter=[location.address]&limit=1&offset=0",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"relationship"
											],
											"query": [
												{
													"key": "id",
													"value": "8b95ab80-2aaf-4636-a65e-7f2563d0d371"
												},
												{
													"key": "rel",
													"value": "resource"
												},
												{
													"key": "filter",
													"value": "[location.address]"
												},
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033h: 200 - Relationship Search with Limit+Offset",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/relsearch?relationship=\"[provider.name]\"&value=\"[[IUDXAdmin]]\"&limit=5&offset=0",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"relsearch"
											],
											"query": [
												{
													"key": "relationship",
													"value": "\"[provider.name]\""
												},
												{
													"key": "value",
													"value": "\"[[IUDXAdmin]]\""
												},
												{
													"key": "limit",
													"value": "5"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033i: 200 - Geo(Circle) Search Response Filter",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.82772,18.488375]&filter=[id, description]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.82772,18.488375]"
												},
												{
													"key": "filter",
													"value": "[id, description]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033j: 200 - Geo(Circle) Search Response Filter and Limit+Offset",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.82772,18.488375]&filter=[id, description]&limit=10&offset=0",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.82772,18.488375]"
												},
												{
													"key": "filter",
													"value": "[id, description]"
												},
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033k: 200 - Geo(Polygon) Search Response Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]&filter=[id, description]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]"
												},
												{
													"key": "filter",
													"value": "[id, description]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033l: 200 - Geo(Polygon) Search Response Filter and Limit+Offset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]&filter=[id, description]&limit=10&offset=0",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]"
												},
												{
													"key": "filter",
													"value": "[id, description]"
												},
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033m: 200 - Geo(LineString) Search Response Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.82772,18.488375],[73.876484,18.525007]]&filter=[id, description]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.82772,18.488375],[73.876484,18.525007]]"
												},
												{
													"key": "filter",
													"value": "[id, description]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033n: 200 - Geo(LineString) Search Response Filter and Limit+Offset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.82772,18.488375],[73.876484,18.525007]]&filter=[id, description]&limit=10&offset=0",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.82772,18.488375],[73.876484,18.525007]]"
												},
												{
													"key": "filter",
													"value": "[id, description]"
												},
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033o: 200 - Geo(BBox) Search Response Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73.8120,18.5305],[73.8665,18.4126]]&filter=[id, description]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.8120,18.5305],[73.8665,18.4126]]"
												},
												{
													"key": "filter",
													"value": "[id, description]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033p: 200 - Geo(BBox) Search Response Filter and Limit+Offset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73.8120,18.5305],[73.8665,18.4126]]&filter=[id, description]&limit=10&offset=0",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.8120,18.5305],[73.8665,18.4126]]"
												},
												{
													"key": "filter",
													"value": "[id, description]"
												},
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033q: 200 - Text Search Response Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?q=\"Sens data\"&filter=[id, description]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "\"Sens data\""
												},
												{
													"key": "filter",
													"value": "[id, description]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033r: 200 - Text Search Response Filter and Limit+Offset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?q=\"Sens data\"&filter=[id, description]&limit=10&offset=0",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "\"Sens data\""
												},
												{
													"key": "filter",
													"value": "[id, description]"
												},
												{
													"key": "limit",
													"value": "10"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033s: 200 - GeoAttribute Response Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]&filter=[tags,id,location.geometry.coordinates]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[location.address]\""
												},
												{
													"key": "value",
													"value": "\"[[pune,delhi]]\""
												},
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]"
												},
												{
													"key": "filter",
													"value": "[tags,id,location.geometry.coordinates]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033t: 200 - GeoText Response Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?q=\"sens data\"&geoproperty=location&georel=within&geometry=Point&coordinates=[73.828603,18.482865]&maxDistance=1000&filter=[tags,id,location.geometry.coordinates]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "\"sens data\""
												},
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.828603,18.482865]"
												},
												{
													"key": "maxDistance",
													"value": "1000"
												},
												{
													"key": "filter",
													"value": "[tags,id,location.geometry.coordinates]"
												}
											]
										},
										"description": "Success-3 GeoText (filter)"
									},
									"response": []
								},
								{
									"name": "Test 033u: 200 - AttributeText Response Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?q=\"bus position\"&property=\"[instance, itemStatus]\"&value=\"[[surat],[ACTIVE]]\"&filter=[tags,id,location.geometry.coordinates]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "q",
													"value": "\"bus position\""
												},
												{
													"key": "property",
													"value": "\"[instance, itemStatus]\""
												},
												{
													"key": "value",
													"value": "\"[[surat],[ACTIVE]]\""
												},
												{
													"key": "filter",
													"value": "[tags,id,location.geometry.coordinates]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 033v: 200 - GeoTextAttribute Response Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"type\",\"urn:dx:cat:Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]&q=\"sens data\"&filter=[tags,id,location.geometry.coordinates]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "property",
													"value": "\"[location.address]\""
												},
												{
													"key": "value",
													"value": "\"[[pune,delhi]]\""
												},
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]"
												},
												{
													"key": "q",
													"value": "\"sens data\""
												},
												{
													"key": "filter",
													"value": "[tags,id,location.geometry.coordinates]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 034a: 400 - Response filter (too many filters)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
												},
												{
													"key": "filter",
													"value": "[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 034b: 400 - Response filter Invalid Filters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[id,name,tags,deviceId,resourceServer,provider,location,@ddre$$]",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
												},
												{
													"key": "filter",
													"value": "[id,name,tags,deviceId,resourceServer,provider,location,@ddre$$]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test  034c: 400 - Exceed limit value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[id,name]&limit=10001",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
												},
												{
													"key": "filter",
													"value": "[id,name]"
												},
												{
													"key": "limit",
													"value": "10001"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Test 034d: 400 - Exceed offset value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[id,name]&limit=1001&offset=1010101",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
												},
												{
													"key": "filter",
													"value": "[id,name]"
												},
												{
													"key": "limit",
													"value": "1001"
												},
												{
													"key": "offset",
													"value": "1010101"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "ANNEXURE-A",
			"item": [
				{
					"name": "Create Item",
					"item": [
						{
							"name": "201 (success) - Create an DX Resource Server",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"    pm.expect(body.results).to.have.property(\"id\");\r",
											"    const ID = body.results.id;\r",
											"    pm.globals.set(\"resource_server_id\", ID);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{adminToken}}"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									},
									{
										"key": "options",
										"value": "central",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n          \"@context\": \"https://voc.iudx.org.in/\",\r\n          \"type\": [\r\n            \"iudx:ResourceServer\"\r\n          ],\r\n          \"name\": \"rs.iudx.io\",\r\n          \"description\": \"dummy  IUDX resource server\",\r\n          \"tags\": [\r\n            \"IUDX\",\r\n            \"Resource\",\r\n            \"Server\",\r\n            \"Platform\"\r\n          ],\r\n          \"owner\": \"fd47486b-3497-4248-ac1e-082e4d37a66c\",\r\n          \"resourceServerHTTPAccessURL\": \"cop.iudx.io\",\r\n          \"resourceServerOrg\":  {\r\n                    \"name\": \"iudx\",\r\n                    \"additionalInfoURL\": \"https://iudx.org.in\",\r\n                    \"location\": {\r\n                        \"type\": \"Place\",\r\n                        \"address\": \"IISc, Bangalore\",\r\n                        \"geometry\": {\r\n                            \"type\": \"Point\",\r\n                            \"coordinates\": [\r\n                                77.570423,\r\n                                13.013945\r\n                            ]\r\n                        }\r\n                    }\r\n                }\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "201 (success) - Create an DX Provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"    pm.expect(body.results).to.have.property(\"id\");\r",
											"    const ID = body.results.id;\r",
											"    pm.globals.set(\"provider_id\", ID);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"@context\": \"https://voc.iudx.org.in/\",\r\n    \"type\": [\r\n        \"iudx:Provider\"\r\n    ],\r\n    \"name\": \"uuid-test\",\r\n    \"resourceServer\": \"{{resource_server_id}}\",\r\n    \"description\": \"provider id for uuid test\",\r\n    \"providerKcId\": \"d8e46706-b9db-44e1-a9aa-e40839396b01\",\r\n    \"providerOrg\": {\r\n        \"name\": \"Datakaveri\",\r\n        \"additionalInfoURL\": \"https://datakaveri.org\",\r\n        \"location\": {\r\n            \"type\": \"Place\",\r\n            \"address\": \"IIsc\",\r\n            \"geometry\": {\r\n                \"type\": \"Point\",\r\n                \"coordinates\": [\r\n                    75.92,\r\n                    14.5\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    \"_summary\": \"uuid test provider id\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "201 (success) - Create an DX Resource Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"    pm.expect(body.results).to.have.property(\"id\");\r",
											"    const ID = body.results.id;\r",
											"    pm.globals.set(\"resource_group_id\", ID);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"@context\": \"https://voc.iudx.org.in/\",\r\n    \"type\": [\r\n        \"iudx:ResourceGroup\",\r\n        \"iudx:IssueReporting\"\r\n    ],\r\n    \"name\": \"agra-swachhata-app\",\r\n    \"description\": \"Civic Issues like open defecation, garbage dumping, etc., reported in Agra city via Swachhata app. Publishes all the complaints/issues lodged on the current day, on a daily basis.\",\r\n    \"tags\": [\r\n        \"swachhata\",\r\n        \"complaints\",\r\n        \"reporting\",\r\n        \"issue\",\r\n        \"garbage dump\",\r\n        \"debris removal\",\r\n        \"open defecation\",\r\n        \"construction material\",\r\n        \"requests\"\r\n    ],\r\n    \"provider\": \"{{provider_id}}\",\r\n    \"resourceServer\": \"{{resource_server_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "201 (success) - Create an DX Resource Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"    pm.expect(body.results).to.have.property(\"id\");\r",
											"    const ID = body.results.id;\r",
											"    pm.globals.set(\"resource_item_id\", ID);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"@context\": \"https://voc.iudx.org.in/\",\r\n    \"type\": [\r\n        \"iudx:Resource\",\r\n        \"iudx:PointOfInterest\"\r\n    ],\r\n    \"name\": \"wifi-locations\",\r\n    \"label\": \"Wi-Fi Locations in Pimpri-Chinchwad City\",\r\n    \"description\": \"The physical coordinates of Wi-Fi system locations in Pimpri-Chinchwad city.\",\r\n    \"tags\": [\r\n        \"Wi-Fi\",\r\n        \"Wi-Fi zone\",\r\n        \"hotspot\",\r\n        \"internet\",\r\n        \"Wi-Fi access\",\r\n        \"Wi-Fi location\",\r\n        \"wireless internet\",\r\n        \"internet access\"\r\n    ],\r\n    \"provider\": \"{{provider_id}}\",\r\n    \"resourceGroup\": \"{{resource_group_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Item",
					"item": [
						{
							"name": "200 (success) - Update an DX Resource Server",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{adminToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n          \"@context\": \"https://voc.iudx.org.in/\",\r\n          \"type\": [\r\n            \"iudx:ResourceServer\"\r\n          ],\r\n          \"id\":\"{{resource_server_id}}\",\r\n          \"owner\": \"fd47486b-3497-4248-ac1e-082e4d37a66c\",\r\n          \"name\": \"rs.iudx.io\",\r\n          \"description\": \"updated dummy  IUDX resource server\",\r\n          \"tags\": [\r\n            \"IUDX\",\r\n            \"Resource\",\r\n            \"Server\",\r\n            \"Platform\"\r\n          ],\r\n          \"resourceServerHTTPAccessURL\": \"cop.iudx.io\",\r\n          \"resourceServerOrg\":  {\r\n                    \"name\": \"iudx\",\r\n                    \"additionalInfoURL\": \"https://iudx.org.in\",\r\n                    \"location\": {\r\n                        \"type\": \"Place\",\r\n                        \"address\": \"IISc, Bangalore\",\r\n                        \"geometry\": {\r\n                            \"type\": \"Point\",\r\n                            \"coordinates\": [\r\n                                77.570423,\r\n                                13.013945\r\n                            ]\r\n                        }\r\n                    }\r\n                }\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - Update an DX Provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n          \"@context\": \"https://voc.iudx.org.in/\",\r\n          \"type\": [\r\n            \"iudx:Provider\"\r\n          ],\r\n          \"name\": \"uuid-test\",\r\n          \"description\": \"provider id for uuid test\",\r\n          \"id\": \"{{provider_id}}\",\r\n          \"resourceServer\": \"{{resource_server_id}}\",\r\n          \"providerOrg\": {\r\n            \"name\": \"Datakaveri\",\r\n            \"additionalInfoURL\": \"https://datakaveri.org\",\r\n            \"location\": {\r\n              \"type\": \"Place\",\r\n              \"address\": \"IIsc\",\r\n              \"geometry\": {\r\n                \"type\": \"Point\",\r\n                \"coordinates\": [\r\n                  75.92,\r\n                  14.5\r\n                ]\r\n              }\r\n            }\r\n          },\r\n          \"providerKcId\": \"d8e46706-b9db-44e1-a9aa-e40839396b01\",\r\n          \"_summary\": \"uuid test provider id\"\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - Update an DX Resource Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n          \"@context\": \"https://voc.iudx.org.in/\",\r\n          \"type\": [\r\n            \"iudx:ResourceGroup\",\r\n            \"iudx:IssueReporting\"\r\n          ],\r\n          \"name\": \"agra-swachhata-app\",\r\n          \"description\": \"updated Civic Issues like open defecation, garbage dumping, etc., reported in Agra city via Swachhata app. Publishes all the complaints/issues lodged on the current day, on a daily basis.\",\r\n          \"tags\": [\r\n            \"swachhata\",\r\n            \"complaints\",\r\n            \"reporting\",\r\n            \"issue\",\r\n            \"garbage dump\",\r\n            \"debris removal\",\r\n            \"open defecation\",\r\n            \"construction material\",\r\n            \"requests\"\r\n          ],\r\n          \"provider\": \"{{provider_id}}\",\r\n          \"resourceServer\":  \"{{resource_server_id}}\",\r\n          \"id\":\"{{resource_group_id}}\"\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - Update an DX Resource Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "token",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\r\n         \"@context\": \"https://voc.iudx.org.in/\",\r\n          \"type\": [\r\n            \"iudx:Resource\",\r\n            \"iudx:PointOfInterest\"\r\n          ],\r\n          \"name\": \"wifi-locations\",\r\n          \"label\": \"Wi-Fi Locations in Pimpri-Chinchwad City\",\r\n          \"description\": \"updated The physical coordinates of Wi-Fi system locations in Pimpri-Chinchwad city.\",\r\n          \"tags\": [\r\n            \"Wi-Fi\",\r\n            \"Wi-Fi zone\",\r\n            \"hotspot\",\r\n            \"internet\",\r\n            \"Wi-Fi access\",\r\n            \"Wi-Fi location\",\r\n            \"wireless internet\",\r\n            \"internet access\"\r\n          ],\r\n          \"provider\": \"{{provider_id}}\",\r\n          \"resourceGroup\": \"{{resource_group_id}}\",\r\n          \"id\":\"{{resource_item_id}}\"\r\n        }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}{{base}}/item/",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Item",
					"item": [
						{
							"name": "200 (success) - Delete an DX Resource Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}{{base}}/item?id={{resource_item_id}}",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									],
									"query": [
										{
											"key": "id",
											"value": "{{resource_item_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - Delete an DX Resource Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}{{base}}/item?id={{resource_group_id}}",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									],
									"query": [
										{
											"key": "id",
											"value": "{{resource_group_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - Delete an DX Provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}{{base}}/item?id={{provider_id}}",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									],
									"query": [
										{
											"key": "id",
											"value": "{{provider_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - Delete an DX Resource Server",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:cat:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "token",
										"value": "{{adminToken}}",
										"type": "text"
									},
									{
										"key": "instance",
										"value": "pune",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{host}}{{base}}/item?id={{resource_server_id}}",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"item"
									],
									"query": [
										{
											"key": "id",
											"value": "{{resource_server_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}